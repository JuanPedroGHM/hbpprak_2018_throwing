import hbp_nrp_excontrol.nrp_states as states
from smach import StateMachine
from smach.state import State

from gazebo_msgs.srv import ApplyBodyWrench, GetModelState, DeleteModel, SpawnEntity, SpawnEntityRequest
from geometry_msgs.msg import Wrench, Vector3, Point
from std_msgs.msg import Float32, String
import rospy
from rospy import ServiceProxy, wait_for_service
from hbp_nrp_excontrol.logs import clientLogger

FINISHED = 'FINISHED'
ERROR = 'ERROR'
PREEMPTED = 'PREEMPTED'

armCmdTopic = rospy.Publisher('/arm_robot/arm_commands')
handCmdTopic = rospy.Publisher('/arm_robot/hand_commands')

sm = StateMachine(outcomes=[FINISHED, ERROR, PREEMPTED])

cylinder_name = "cylinder"
cylinder_path = "resources/cylinder.xml"

import hbp_nrp_excontrol.nrp_states as states

class ResetSimulationState(State):
    def __init__(self, cylinder_name, sdf_xml_path, outcomes=['success', 'aborted']):
        super(ResetSimulationState, self).__init__(outcomes=outcomes)
        self._cylinder_name = cylinder_name
        self._spawn_proxy = rospy.ServiceProxy('/gazebo/spawn_sdf_entity',
                                               SpawnEntity, persistent=True)
        self._cylinder_msg = SpawnEntityRequest()
        self._cylinder_msg.entity_name = self._cylinder_name
        self._cylinder_msg.entity_xml = open(sdf_xml_path, 'r').read().format(cylinder_name=cylinder_name)
        self._cylinder_msg.initial_pose.position.x = -0.37797
        self._cylinder_msg.initial_pose.position.y = -0.25321
        self._cylinder_msg.initial_pose.position.z = 1.12015
        self._cylinder_msg.reference_frame = "world"

    def execute(self, userdata):
        self._spawn_proxy(self._cylinder_msg)
        clientLogger.info('Reseting Simulation')
        armCmdTopic.publish(String("RESET"))
        handCmdTopic.publish(String("RELEASE"))
        return 'success'
    
class TryingToGraspState(State):
    def __init__(self, cylinder_name, rate=1., waitingTime=20, outcomes=['success', 'failure', 'aborted']):
        super(TryingToGraspState, self).__init__(outcomes=outcomes)
        self._rate = rospy.Rate(rate)
        self._waitingTime = waitingTime
        self._cylinder_name = cylinder_name
        self._state_proxy = ServiceProxy('/gazebo/get_model_state',
                                         GetModelState, persistent=True)
        self._delete_proxy = ServiceProxy('/gazebo/delete_model',
                                         DeleteModel, persistent=True)
        
    def execute(self, userdata):
        ## Send grap commands and move the cylinder to reset position
        clientLogger.info('Trying to grasp')
        start_time = rospy.Time.now()
        armCmdTopic.publish(String('GRASP_BLUE'))
        handCmdTopic.publish(String('GRASP'))
        
        armCmdTopic.publish(String('RESET'))
        
        while not self.cylinderInPosition() and (rospy.Time.now() - start_time) < rospy.Duration(self._waitingTime):
            self._rate.sleep()
            
        if self.cylinderInPosition():
            clientLogger.info('Cylinder in position, ready to take off!')
            return 'success'
        else:
            self._delete_proxy(self._cylinder_name)
            return 'failure'
        
    def cylinderInPosition(self):
        return False

class FlyingCylinderState(State):
    def __init__(self, cylinder_name, rate=1., outcomes=['success', 'aborted'], max_hit_duration=10):
        super(FlyingCylinderState, self).__init__(outcomes=outcomes)
        self._rate = rospy.Rate(rate)
        self._cylinder_name = cylinder_name
        self._state_proxy = ServiceProxy('/gazebo/get_model_state',
                                         GetModelState, persistent=True)
        self._delete_proxy = ServiceProxy('/gazebo/delete_model',
                                         DeleteModel, persistent=True)
        self._distance_topic = rospy.Publisher('/cylinder_distance', Float32, queue_size=10)
        self.max_hit_duration=10

    def execute(self, userdata):
        start_time = rospy.Time.now()
        clientLogger.info('Waiting for cylinder to touch the ground')
        
        while not self.cylinder_lower_than(0.2) and (rospy.Time.now() - start_time) < rospy.Duration(self.max_hit_duration):
            self._rate.sleep()
        cylinder_pos = self.get_cylinder_distance()
        clientLogger.advertise("Cylinder distance: {}".format(cylinder_pos))
        self._distance_topic.publish(Float32(cylinder_pos))
        self._delete_proxy(self._cylinder_name)
        return 'success'
    
    def get_cylinder_distance(self):
      try:
          current_cylinder_state = self._state_proxy(cylinder_name, "world")
      except rospy.ServiceException as exc:
          clientLogger.error(str(exc))
          return -1000.0
      return -current_cylinder_state.pose.position.y

    def cylinder_lower_than(self, z_threshold):
        try:
            current_cylinder_state = self._state_proxy(cylinder_name, "world")
        except rospy.ServiceException as exc:
            clientLogger.info(str(exc))
            return False
        return current_cylinder_state.pose.position.z < z_threshold

with sm:
    StateMachine.add(
      "reset_simulation",
      ResetSimulationState(cylinder_name, cylinder_path),
      transitions = {"success": "trying_to_grasp",
                     "aborted": ERROR}
    )
    
    StateMachine.add(
     "trying_to_grasp",
     TryingToGraspState(cylinder_name),
     transitions = {"success": "flying_cylinder",
                    "failure": "reset_simulation",
                    "aborted": ERROR}
    )
    
    StateMachine.add(
     "flying_cylinder",
     FlyingCylinderState(cylinder_name),
     transitions = {"success": "reset_simulation",
                    "aborted": ERROR}
    )
    
    

